import org.wlrobotics.common.*

plugins {
    id 'base'
    id 'groovy'
    id 'java'
}

ext {
    visionProcessors = ["10.36.68.12", "10.36.68.13", "kudu", "localhost"]
    ipMask = "10.36.68"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


def robotDeployDir = "${rootProject.projectDir}/src/main/deploy"

def isWindows (){
  return (System.properties['os.name'].toLowerCase().contains("windows"))
}

def isLinux() {
  return (System.properties['os.name'].toLowerCase().contains("linux"))
}

tasks.register("photonProcessors") {
    dependsOn 'build'
    group = "photonCoProc"
    description "lists the status of all defined photon co-processors."
    doLast {
        String hostIP = ""
        def checker = new ComputerChecker()
        project.ext.visionProcessors.each { processor ->
            if (checker.findOnlineComputer(processor)) {
                hostIP = checker.getHostAddress(processor)
                if (hostIP.startsWith(ipMask)) {
                    println "INFO: Vision processor $processor [$hostIP] is online and onboard for this build."
                }else {
                    println "INFO: Vision processor $processor [$hostIP] is online and NOT onboard for this build."
                }
            }
            else {
                println "INFO: Vision processor $processor is Offline for this build."
            }
        }

    }
}

tasks.register("photonDeployUpdate") {
    group = "photonCoProc"
    description "Deploys a photonvision jar to co-processor as an update"
    doLast {
        /*
        def remoteMachine = "YourRemoteMachine"
        def credential = new Object() // UsernamePasswordCredentials("username", "password")
        def localJarPath = "C:/path/to/your/photonvision.jar"
        def remoteJarPath = "\\$remoteMachine\\C:/path/to/destination/photonvision.jar"
        def serviceName = "PhotonVisionService"

        def psScriptFile = new File("deploy.ps1")
        def psScriptContent = psScriptFile.text

        def process = ["powershell", "-File", psScriptFile.absolutePath, "-remoteMachine", remoteMachine, "-credential", credential, "-localJarPath", localJarPath, "-remoteJarPath", remoteJarPath, "-serviceName", serviceName]
        def proc = process.run()
        proc.start()

        proc.waitFor()
        int exitValue = proc.exitValue()
        if (exitValue != 0) {
            // Handle error
            throw new GradleException("PowerShell script failed with exit code $exitValue")
        }
        */
        println "Photon Service Deploy Update "
    }
}

tasks.register("photonInstall") {
    //dependsOn "deployPhotonVision"
    description "Installs the photon vision jar as a new windows service"
    group = "photonCoProc"
    doLast {
        println "Installing the photon jar as a new windows service"
    }
}

tasks.register("photonStart") {
    //dependsOn "deployPhotonVision"
    description "Starts the photon vision service"
    group = "photonCoProc"
    doLast {
        println "Starting the photon jar as a windows service"
    }
}

tasks.register("photonStop") {
    description "Stops the photon vision jar as a windows service"
    group = "photonCoProc"
    doLast {
        println "Stoping the photon vision jar as a windows service"
    }
}

tasks.register("photonRestart") {
    description "Stops & Restarts the photon vision jar as a windows service"
    group = "photonCoProc"
    doLast {
        println "Stopping the photon vision windows service."
        println "Starting the photon vision windows service."

    }
}

tasks.register("photonClearLog") {
    description "clears the log file for the photon"
    group = "photonCoProc"
    doLast {
        println "Clearing the log file for the photon service."
    }
}


tasks.register("photonFetchLog") {
    description "Fetches the log file for the photon"
    group = "photonCoProc"
    doLast {
        println "Fetching the log file for the photon service."
    }
}


tasks.register("photonAirplaneModeOn") {
    description "Puts the GMKTec mini into airplane mode"
    group = "photonCoProc"
    doLast {
        println "Airplan Mode activated"
    }
}

tasks.register("photonAirplaneModeOff") {
    description "Puts the GMKTec mini out of airplane mode"
    group = "photonCoProc"
    doLast {
        println "Airplan Mode deactivated"
    }
}
